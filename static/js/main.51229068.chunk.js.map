{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.componenet.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","className","src","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handelChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qVAIaA,G,kBAAO,SAACC,GAAW,IACvBC,EAAYD,EAAZC,QACR,OACC,yBAAKC,UAAU,kBACd,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,UCNFC,EAAW,SAAAR,GAAU,IACvBS,EAAYT,EAAZS,SACP,OACI,yBAAKP,UAAU,aACVO,EAASC,KAAI,SAAAT,GAAO,OACjB,kBAAC,EAAD,CAAMU,IAAKV,EAAQG,GAAIH,QAASA,SCLnCW,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,2BAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCqC9DG,E,YAnCd,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZT,SAAU,GACVU,YAAa,IAJD,E,iFAQO,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEhB,SAAUe,S,+BAGnC,IAAD,SAC0BE,KAAKR,MAA/BT,EADA,EACAA,SAAUU,EADV,EACUA,YACZQ,EAAmBlB,EAASmB,QAAO,SAAC3B,GAAD,OACxCA,EAAQK,KAAKuB,cAAcC,SAASX,EAAYU,kBAGjD,OACC,yBAAK3B,UAAU,OACd,yBAAKA,UAAU,OACd,gDACA,kBAAC,EAAD,CACCW,YAAY,iBACZC,aAAc,SAACiB,GAAD,OAAO,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE5D,kBAAC,EAAD,CAAUxB,SAAUkB,U,GA7BPO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.51229068.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n\tconst { monster } = props;\r\n\treturn (\r\n\t\t<div className=\"card-container\">\r\n\t\t\t<img src={`https://robohash.org/${monster.id}?set=set2&size=150x150`} alt=\"monster\" />\r\n\t\t\t<h2>{monster.name}</h2>\r\n\t\t\t<p>{monster.email}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './card-list-styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    const {monsters} = props;\r\n    return(\r\n        <div className='card-list'>\r\n            {monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} />\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './search-box-styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handelChange }) => (\r\n\t<input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handelChange} />\r\n);\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.componenet';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ monsters: users }));\n\t}\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1> Monster Roldex </h1>\n\t\t\t\t\t<SearchBox\n\t\t\t\t\t\tplaceholder=\"search monster\"\n\t\t\t\t\t\thandelChange={(e) => this.setState({ searchField: e.target.value })}\n\t\t\t\t\t/>\n\t\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}